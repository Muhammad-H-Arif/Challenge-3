def find_subset(arr, target_sum):
  # The table will store True or False values to indicate whether the subset sum can be obtained
  n = len(arr)
  dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]

  # Base Case initialization - A sum of 0 can always be obtained with an empty subset
  for i in range(n + 1):
      dp[i][0] = True

  # Fill the dp table
  for i in range(1, n + 1):
      for s in range(1, target_sum + 1):
          if arr[i - 1] > s:
              dp[i][s] = dp[i - 1][s]
          else:
              dp[i][s] = dp[i - 1][s] or dp[i - 1][s - arr[i - 1]]

  # If the bottom-right corner value is False, then no subset adds up to the target sum
  if not dp[n][target_sum]:
      return False, []

  # Reconstruct the subset
  subset = []
  i, s = n, target_sum
  while s > 0:
      if dp[i - 1][s]:
          i -= 1
      else:
          subset.append(arr[i - 1])
          s -= arr[i - 1]
          i -= 1

  return True, subset

# Example usage based on the challange
array_for_subset = [1, 3, 5, 0, 11, 17, 9, 5]
target_sum = 10
exists, subset = find_subset(array_for_subset, target_sum)
if exists:
  print("Subset Exists:", subset)
else:
  print("No subset with the given sum exists.")
